name: Nix Autofix

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * 1"  # Mondays at 06:00 UTC
  push:
    branches: [ main, master ]

permissions:
  contents: write
  pull-requests: write

jobs:
  autofix:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Install Nix on the GitHub runner
      - name: The Determinate Nix Installer
        uses: DeterminateSystems/nix-installer-action@v20

      # Optional: enable a fast binary cache for nixpkgs
      - name: Enable Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Determine default branch
        id: default-branch
        shell: bash
        env:
          EVENT_DEFAULT_BRANCH: ${{ github.event.repository.default_branch || '' }}
          EVENT_REF_NAME: ${{ github.ref_name || '' }}
        run: |
          set -euo pipefail
          # github.event.repository.default_branch is not defined for schedule triggers
          default_branch="${EVENT_DEFAULT_BRANCH:-}"
          if [ -z "$default_branch" ]; then
            # Fallback to the currently checked out ref (e.g. refs/heads/main)
            default_branch="${EVENT_REF_NAME:-}"
          fi
          if [ -z "$default_branch" ]; then
            echo "Unable to determine default branch" >&2
            exit 1
          fi
          echo "value=$default_branch" >>"$GITHUB_OUTPUT"

      - name: Create working branch
        shell: bash
        env:
          DEFAULT_BRANCH: ${{ steps.default-branch.outputs.value }}
        run: |
          set -euo pipefail
          branch="ci/nix-autofix"
          git checkout "$DEFAULT_BRANCH"
          git checkout -B "$branch"

      - name: Format with nixfmt-rfc-style
        shell: bash
        run: |
          set -euo pipefail
          # Collect tracked .nix files (safe if none exist)
          git ls-files -z '*.nix' > nix_files.z || true
          # If there are no files, xargs -r will do nothing
          xargs -0 -r nix run --extra-experimental-features 'nix-command flakes' \
            nixpkgs#nixfmt-rfc-style -- < nix_files.z

      - name: Apply statix fixes (safe)
        shell: bash
        run: |
          set -euo pipefail
          nix run --extra-experimental-features 'nix-command flakes' \
            nixpkgs#statix -- fix

      - name: Remove dead code with deadnix --edit
        shell: bash
        run: |
          set -euo pipefail
          nix run --extra-experimental-features 'nix-command flakes' \
            nixpkgs#deadnix -- --edit .

      - name: Commit changes
        id: commit
        shell: bash
        run: |
          set -euo pipefail
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "chore(nix): autofix via nixfmt/statix/deadnix"
          echo "has_changes=true" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          branch: ci/nix-autofix
          base: ${{ steps.default-branch.outputs.value }}
          title: "chore(nix): autofix via nixfmt/statix/deadnix"
          commit-message: "chore(nix): autofix via nixfmt/statix/deadnix"
          body: |
            Automated PR applying:
            - `nix run nixpkgs#nixfmt-rfc-style`
            - `nix run nixpkgs#statix -- fix`
            - `nix run nixpkgs#deadnix -- --edit`
          labels: |
            automation
            maintenance
