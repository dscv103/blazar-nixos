name: Nix CI (nixfmt-rfc-style + statix + deadnix)

on:
  pull_request:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install Nix on the GitHub runner
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20

      # Optional: enable a fast binary cache for nixpkgs
      - name: Enable Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v7

      - name: Collect .nix files
        id: files
        shell: bash
        run: |
          git ls-files -z '*.nix' > nix_files.z
          count=$(wc -c < nix_files.z || echo 0)
          if [ "$count" -eq 0 ]; then
            echo "found=0" >> "$GITHUB_OUTPUT"
          else
            echo "found=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Check formatting with nixfmt-rfc-style
        if: steps.files.outputs.found == '1'
        shell: bash
        run: |
          xargs -0 -r nix run --extra-experimental-features 'nix-command flakes' \
            nixpkgs#nixfmt-rfc-style -- --check < nix_files.z

      - name: Lint with statix
        shell: bash
        run: |
          nix run --extra-experimental-features 'nix-command flakes' \
            nixpkgs#statix -- --version
          nix run --extra-experimental-features 'nix-command flakes' \
            nixpkgs#statix -- check .

      - name: Dead code check with deadnix
        shell: bash
        run: |
          nix run --extra-experimental-features 'nix-command flakes' \
            nixpkgs#deadnix -- --fail .
